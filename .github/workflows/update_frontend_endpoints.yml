name: Update Frontend Endpoints on Backend Deploy

on:
  push:
    branches:
      - master
    paths:
      - 'services/**'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  FRONTEND_PROJECT_NAME: 'frontend-tester'

jobs:
  update-and-redeploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Vercel CLI and jq
        run: |
          npm install -g vercel
          sudo apt-get update && sudo apt-get install -y jq

      - name: Identify Changed Backend Services
        id: changed_services
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Files changed in this push: $CHANGED_FILES"
          CHANGED_SERVICES=$(echo "$CHANGED_FILES" | grep 'services/' | awk -F'/' '{print $2}' | sort -u)
          if [ -z "$CHANGED_SERVICES" ]; then
            echo "No backend services were changed. Exiting."
            exit 0
          fi
          echo "Backend services changed: $CHANGED_SERVICES"
          echo "services=${CHANGED_SERVICES}" >> $GITHUB_OUTPUT

      - name: Update Vercel Environment Variables
        if: steps.changed_services.outputs.services
        run: |
          for SERVICE_DIR in ${{ steps.changed_services.outputs.services }}; do
            echo "Processing service: $SERVICE_DIR"
            VERCEL_PROJECT_NAME=$SERVICE_DIR
            ENV_VAR_NAME=""
            case $SERVICE_DIR in
              "servico-agentes-ia") ENV_VAR_NAME="NEXT_PUBLIC_AI_API_URL" ;;
              "servico-busca") ENV_VAR_NAME="NEXT_PUBLIC_SEARCH_API_URL" ;;
              "servico-healthcheck") continue ;;
              "servico-lojas") ENV_VAR_NAME="NEXT_PUBLIC_STORES_API_URL" ;;
              "servico-monitoramento") ENV_VAR_NAME="NEXT_PUBLIC_MONITORING_API_URL" ;;
              "servico-ofertas") ENV_VAR_NAME="NEXT_PUBLIC_OFFERS_API_URL" ;;
              "servico-produtos") ENV_VAR_NAME="NEXT_PUBLIC_PRODUCTS_API_URL" ;;
              "servico-usuarios") ENV_VAR_NAME="NEXT_PUBLIC_USERS_API_URL" ;;
              *) echo "Warning: No mapping for $SERVICE_DIR." && continue ;;
            esac
            
            echo "Fetching URL for $VERCEL_PROJECT_NAME..."
            echo "Waiting for deployment of $VERCEL_PROJECT_NAME to be ready..."
            RETRY_COUNT=0
            MAX_RETRIES=18 # 18 retries * 10 seconds = 3 minutes
            LATEST_STATE=""
            while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
              LATEST_DEPLOYMENT_JSON=$(vercel ls $VERCEL_PROJECT_NAME --prod --json --token=${{ secrets.VERCEL_TOKEN }} | jq '.deployments[0]')
              LATEST_STATE=$(echo $LATEST_DEPLOYMENT_JSON | jq -r '.state')
              if [[ "$LATEST_STATE" == "READY" ]]; then
                break
              fi
              echo "Deployment for $VERCEL_PROJECT_NAME is in state $LATEST_STATE. Waiting 10 seconds..."
              sleep 10
              RETRY_COUNT=$((RETRY_COUNT + 1))
            done

            if [[ "$LATEST_STATE" != "READY" ]]; then
              echo "Error: Deployment for $VERCEL_PROJECT_NAME did not become ready in time. State: $LATEST_STATE"
              continue
            fi

            RAW_URL=$(echo $LATEST_DEPLOYMENT_JSON | jq -r '.url')
            NEW_URL="https://$RAW_URL"
            
            echo "Found new URL: $NEW_URL"
            vercel env rm $ENV_VAR_NAME production -y --token=${{ secrets.VERCEL_TOKEN }} || true
            echo $NEW_URL | vercel env add $ENV_VAR_NAME production --token=${{ secrets.VERCEL_TOKEN }}
            echo "---"
          done

      - name: Trigger Redeployment of Frontend
        if: steps.changed_services.outputs.services
        run: |
          echo "Triggering a new production deployment for $FRONTEND_PROJECT_NAME..."
          # Get the URL of the latest deployment with status 'Ready'
          RAW_URL=$(vercel ls $FRONTEND_PROJECT_NAME --prod --json --token=${{ secrets.VERCEL_TOKEN }} | jq -r '[.deployments[] | select(.state == "READY")][0].url')

          if [[ -z "$RAW_URL" || "$RAW_URL" == "null" ]]; then
            echo "Error: Could not find a ready deployment URL for $FRONTEND_PROJECT_NAME to redeploy."
            exit 1
          fi
          DEPLOYMENT_URL="https://$RAW_URL"

          echo "Redeploying production deployment: $DEPLOYMENT_URL"
          vercel redeploy $DEPLOYMENT_URL --target production --token=${{ secrets.VERCEL_TOKEN }}