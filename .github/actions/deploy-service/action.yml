name: 'Deploy Vercel Microservice'
description: 'Deploys a Vercel microservice if changes are detected in its directory.'
inputs:
  service_path:
    description: 'The path to the microservice directory (e.g., services/servico-usuarios)'
    required: true
  vercel_project_name:
    description: 'The Vercel project name for the microservice'
    required: true
  vercel_org_id:
    description: 'The Vercel Organization ID'
    required: true
  vercel_token:
    description: 'The Vercel API Token'
    required: true
outputs:
  url:
    description: 'The URL of the deployed microservice (if deployed)'
    value: ${{ steps.deploy.outputs.url }}
runs:
  using: 'composite'
  steps:
    - name: Check for changes in ${{ inputs.service_path }}
      id: check_changes
      shell: bash
      run: |
        if git diff --quiet HEAD^ HEAD -- ${{ inputs.service_path }}; then
          echo "No changes detected in ${{ inputs.service_path }}. Skipping deployment."
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in ${{ inputs.service_path }}. Proceeding with deployment."
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        fi

    - name: Deploy ${{ inputs.vercel_project_name }} to Vercel
      id: deploy
      if: steps.check_changes.outputs.should_deploy == 'true'
      shell: bash
      run: |
        set -e # Exit immediately if a command exits with a non-zero status.
        set -o pipefail # Return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status.

        echo "Navigating to ${{ inputs.service_path }}"
        cd ${{ inputs.service_path }}
        
        echo "--- Debugging Vercel CLI ---"
        which vercel || { echo "Error: Vercel CLI not found."; exit 1; }
        vercel --version || { echo "Error: Vercel CLI failed to get version."; exit 1; }
        vercel whoami --token ${{ inputs.vercel_token }} || { echo "Error: Vercel CLI failed to authenticate. Check VERCEL_TOKEN permissions."; exit 1; }
        echo "----------------------------"

        echo "Running Vercel deploy for ${{ inputs.vercel_project_name }}..."
        # Captura a saída JSON do deploy
        DEPLOY_OUTPUT=$(vercel deploy --prod --token ${{ inputs.vercel_token }} --scope ${{ inputs.vercel_org_id }} --yes --json 2>&1)
        DEPLOY_EXIT_CODE=$?

        echo "--- Vercel Deploy Output (JSON) ---"
        echo "$DEPLOY_OUTPUT"
        echo "---------------------------------"

        if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
          echo "Erro: O comando 'vercel deploy' falhou com código de saída $DEPLOY_EXIT_CODE."
          exit $DEPLOY_EXIT_CODE
        fi
        
        # Extrai a URL do deploy da saída JSON
        DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | jq -r '.url')
        
        echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        echo "Deployed URL: $DEPLOY_URL"
