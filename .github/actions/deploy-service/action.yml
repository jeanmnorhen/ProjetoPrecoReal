name: 'Deploy Vercel Microservice'
description: 'Deploys a Vercel microservice if changes are detected in its directory.'
inputs:
  service_path:
    description: 'The path to the microservice directory (e.g., services/servico-usuarios)'
    required: true
  vercel_project_name:
    description: 'The Vercel project name for the microservice'
    required: true
  vercel_org_id:
    description: 'The Vercel Organization ID'
    required: true
  vercel_token:
    description: 'The Vercel API Token'
    required: true
outputs:
  url:
    description: 'The URL of the deployed microservice (if deployed)'
    value: ${{ steps.deploy.outputs.url }}
runs:
  using: 'composite'
  steps:
    - name: Check for changes in ${{ inputs.service_path }}
      id: check_changes
      shell: bash
      run: |
        echo "Forçando deploy para ${{ inputs.service_path }} para garantir atualização de URL."
        echo "should_deploy=true" >> $GITHUB_OUTPUT

    - name: Deploy ${{ inputs.vercel_project_name }} to Vercel
      id: deploy
      if: steps.check_changes.outputs.should_deploy == 'true'
      shell: bash
      run: |
        set -e
        set -o pipefail

        echo "Navigating to ${{ inputs.service_path }}"
        cd ${{ inputs.service_path }}

        echo "--- Linking Vercel Project ---"
        vercel link --project ${{ inputs.vercel_project_name }} --token ${{ inputs.vercel_token }} --scope ${{ inputs.vercel_org_id }} --yes
        echo "------------------------------"
        
        echo "--- Debugging Vercel CLI ---"
        which vercel || { echo "Error: Vercel CLI not found."; exit 1; }
        vercel --version || { echo "Error: Vercel CLI failed to get version."; exit 1; }
        vercel whoami --token ${{ inputs.vercel_token }} || { echo "Error: Vercel CLI failed to authenticate. Check VERCEL_TOKEN permissions."; exit 1; }
        echo "----------------------------"

        echo "Running Vercel deploy for ${{ inputs.vercel_project_name }}..."
        
        # Temporarily disable exit on error to capture the output
        set +e
        DEPLOY_OUTPUT=$(vercel deploy --prod --token ${{ inputs.vercel_token }} --scope ${{ inputs.vercel_org_id }} --yes 2>&1)
        DEPLOY_EXIT_CODE=$?
        set -e

        # Print the full output for debugging
        echo "$DEPLOY_OUTPUT"

        if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
          echo "Erro: O comando 'vercel deploy' falhou com código de saída $DEPLOY_EXIT_CODE."
          exit $DEPLOY_EXIT_CODE
        fi
        
        # Extract the URL from the captured output
        DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep "Production: " | awk '{print $2}')

        echo "--- Vercel Deploy Output (last line) ---"
        echo "$DEPLOY_URL"
        echo "---------------------------------"
        
        # Verifica se a URL é válida (começa com http e contém .vercel.app)
        if [[ ! "$DEPLOY_URL" =~ ^https?://.*\.vercel\.app$ ]]; then
          echo "Erro: O comando 'vercel deploy' não retornou uma URL de deploy válida. Saída: $DEPLOY_URL"
          exit 1
        fi
        
        echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        echo "Deployed URL: $DEPLOY_URL"
